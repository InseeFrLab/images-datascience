name: Build all images

on:
  workflow_call:
    inputs:
      test:
        description: should test
        required: true
        type: string
      push:
        description: should push
        required: true
        type: string
      image:
        description: name of docker image
        required: true
        type: string
      context:
        description: context of docker image
        required: true
        type: string
      base_image:
        description: context of docker image
        required: true
        type: string
      base_image_gpu:
        description: context of docker image
        required: true
        type: string
      matrix:
        description: zad
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
        

jobs:
  # matrix_prep:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:
  #   - name: Check out code 
  #     uses: actions/checkout@v2
  #   - id: set-matrix
  #     run: |
  #       matrix=$(cat ./releases/${{ inputs.matrix_json }} | jq .) 
  #       echo $matrix                
  #       echo ::set-output name=matrix::{\"include\":$(echo $matrix)}

  docker:
    runs-on: ubuntu-latest
    # needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{fromJson(inputs.matrix)}}
    steps:
      #- name: Checkout
      #  uses: actions/checkout@v3
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: inseefrlab/onyxia-${{ inputs.image }}
          tags: |
            # set latest tag for main branch
            type=raw,value=latest${{ matrix.device_suffix }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            # propagate valid semver tags
            type=semver,pattern={{raw}}${{ matrix.device_suffix }}

      # https://github.com/actions/virtual-environments/issues/2840
      - name: Make free space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        shell: bash
            
      # - name: Build and store
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ${{ inputs.context }}/
      #     file: ${{ inputs.context }}/Dockerfile
      #     load: true
      #     build-args: BASE_IMAGE={{inputs.base_image}}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.docker_meta.outputs.labels }}

      - name: buildargs docker command
        id: buildargs
        run: |
            buildargs="--build-arg BASE_IMAGE=${{ matrix.base_image }}"
            python_version="${{ matrix.python_version}}"
            if [ -n "$python_version" ]; then
              buildargs+=" --build-arg PYTHON_VERSION=$python_version"
            fi
            echo "${buildargs}"
            echo "::set-output name=buildargs::${buildargs}"
        shell: bash
      
      - name: classic build
        run:  docker build --rm --force-rm ${{ steps.buildargs.outputs.buildargs }} --tag ${{ steps.meta.outputs.tags }} ${{ inputs.image }}/
        env:
          DOCKER_BUILDKIT: 1
          # Full logs for CI build
          BUILDKIT_PROGRESS: plain
        shell: bash
      
      - name: run structure tests
        if: ${{ inputs.test == 'true' }}
        uses: plexsystems/container-structure-test-action@v0.2.0
        with:
          image: ${{ steps.meta.outputs.tags }}
          config: ./${{ inputs.image }}/tests.yaml

      - name: Login to DockerHub
        if: ${{ inputs.push == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: classic push
        if: ${{ inputs.push == 'true' }}
        run: docker push ${{ steps.meta.outputs.tags }}
    
     # - name: Build and push
     #   if: ${{ inputs.push == 'true' }}
     #   uses: docker/build-push-action@v3
     #   with:
     #      context: ${{ inputs.context }}/
     #      build-args: |
     #       BASE_IMAGE=${{ matrix.base_image }}
     #       DEVICE_SUFFIX=${{ matrix.device_suffix }}
     #      push: true
     #      tags: ${{ steps.meta.outputs.tags }}
