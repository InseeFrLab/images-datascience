name: Build all images

on:
  workflow_call:
    inputs:
      test:
        description: should test
        required: true
        type: string
      push:
        description: should push
        required: true
        type: string
      image:
        description: name of docker image
        required: true
        type: string
      context:
        description: context of docker image
        required: true
        type: string
      base_image:
        description: context of docker image
        required: true
        type: string
      base_image_gpu:
        description: context of docker image
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
        

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')  
        matrix=$(cat base.json | jq .)                
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}
  # build-matrix:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: set-matrix
  #       run: |
  #         echo '::set-output name=base_image_matrix::["${{ inputs.base_image }}","${{ inputs.base_image_gpu }}"]'
  #   outputs:
  #     base_image_matrix: ${{ steps.set-matrix.outputs.base_image_matrix }}
  #     python_matrix: ${{ steps.set-matrix.outputs.python_matrix }}

  docker:
    runs-on: ubuntu-latest
    needs: build-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
        #base_image: ${{fromJson(needs.matrix_prep.outputs.matrix)}}   ${{ fromJson(needs.build-matrix.outputs.base_image_matrix) }}
        # include:
        #   - base_image: ${{ inputs.base_image }}
        #     device_suffix: ""
        #   - base_image: ${{ inputs.base_image_gpu }} 
        #     device_suffix: "-gpu"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: inseefrlab/onyxia-${{ inputs.image }}
          tags: |
            # set latest tag for main branch
            type=raw,value=latest${{ matrix.device_suffix }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            # propagate valid semver tags
            type=semver,pattern={{raw}}${{ matrix.device_suffix }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/actions/virtual-environments/issues/2840
      - name: Make free space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        shell: bash
            
      - name: Build and store
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}/
          file: ${{ inputs.context }}/Dockerfile
          load: true
          build-args: BASE_IMAGE={{inputs.base_image}}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      
      - name: run structure tests
        if: ${{ inputs.test == 'true' }}
        uses: plexsystems/container-structure-test-action@v0.2.0
        with:
          image: ${{ steps.meta.outputs.tags }}
          config: ./${{ inputs.image }}/tests.yaml

      - name: Login to DockerHub
        if: ${{ inputs.push == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: classic push
        if: ${{ inputs.push == 'true' }}
        run: docker push ${{ steps.meta.outputs.tags }}
    
     # - name: Build and push
     #   if: ${{ inputs.push == 'true' }}
     #   uses: docker/build-push-action@v3
     #   with:
     #      context: ${{ inputs.context }}/
     #      build-args: |
     #       BASE_IMAGE=${{ matrix.base_image }}
     #       DEVICE_SUFFIX=${{ matrix.device_suffix }}
     #      push: true
     #      tags: ${{ steps.meta.outputs.tags }}
