name: Template to build and push Docker images

env:
  OWNER: ${{ github.repository_owner }}

on:
  workflow_call:
    inputs:
      test:
        description: should test
        required: false
        type: string
      push:
        description: should push
        required: false
        type: string
      image:
        description: name of docker image
        required: false
        type: string
      prefix:
        description: prefix for docker images
        required: false
        type: string
        default: 'onyxia'
      context:
        description: context of docker image
        required: false
        type: string
      base_image:
        description: context of docker image
        required: true
        type: string
      base_image_gpu:
        description: context of docker image
        required: false
        type: string
      external_base_image:
        description: is base image from another organization
        required: false
        type: boolean
      python_version_1:
        description: context of docker image
        required: false
        type: string
      python_version_2:
        description: context of docker image
        required: false
        type: string
      r_version_1:
        description: context of docker image
        required: false
        type: string
      r_version_2:
        description: context of docker image
        required: false
        type: string
      spark_version:
        description: context of docker image
        required: false
        type: string
      debug:
        description: spark version
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code 
      uses: actions/checkout@v3
    - id: set-matrix
      run: |
        base_image_escaped=$(echo ${{inputs.base_image}} | sed 's/\//\\\//g' )
        base_image_gpu_escaped=$(echo ${{inputs.base_image_gpu}} | sed 's/\//\\\//g' )
        sed -i "s/:base_image_gpu/$base_image_gpu_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:base_image/$base_image_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_1/${{inputs.python_version_1}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_2/${{inputs.python_version_2}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_1/${{inputs.r_version_1}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_2/${{inputs.r_version_2}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:spark_version/${{inputs.spark_version}}/g" ./releases/${{ inputs.image }}.json
        matrix=$(cat ./releases/${{ inputs.image }}.json | jq .)
        echo $matrix
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  docker:
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: 
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      - name: Check out code 
        uses: actions/checkout@v3
        
      # https://github.com/actions/virtual-environments/issues/2840
      - name: Make free space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          docker rmi -f $(docker images -aq)
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate build args
        id: generate-build-args
        run: |
            if [ -n "${{ matrix.gpu }}" ]; then
              DEVICE_SUFFIX=-gpu
            fi
            base_image=${{ matrix.base_image }}
            if [[ "$base_image" == *"-delim-"* ]]; then
              image_name=$(echo $base_image | awk -F '-delim-' '{print $1}' )
              tag=$(echo $base_image | awk -F '-delim-' '{print $2}' )
            else
              image_name=$(echo $base_image | awk -F ':' '{print $1}' )
              tag=$(echo $base_image | awk -F ':' '{print $2}' )
            fi
            if [[ "${{ inputs.external_base_image }}" = true ]]; then
              final_name="${image_name}:${tag}"
            else
              owner=${{ env.OWNER }}
              owner=$(echo "$owner" | awk '{print tolower($0)}')
              final_name="${owner}/${{ inputs.prefix }}-${image_name}:${tag}${DEVICE_SUFFIX}"
            fi
            echo "device_suffix=${DEVICE_SUFFIX}" >> $GITHUB_OUTPUT
            echo "base_image=${final_name}" >> $GITHUB_OUTPUT
            echo $final_name
        shell: bash

      - name: Generate output tags
        id: generate-tags
        run: |
          image=${{ matrix.output_image }}
          if [[ "$image" == *"-delim-"* ]]; then
            image_name=$(echo $image | awk -F '-delim-' '{print $1}' )
            tag=$(echo $image | awk -F '-delim-' '{print $2}' )
          else
            image_name=$(echo $image | awk -F ':' '{print $1}' )
            tag=$(echo $image | awk -F ':' '{print $2}' )
          fi
          date=$(date +%Y.%m.%d)
          owner=${{ env.OWNER }}
          owner=$(echo "$owner" | awk '{print tolower($0)}')
          final_name="$owner/${{ inputs.prefix}}-$image_name"
          if [ -n "${{ matrix.gpu }}" ]; then
              DEVICE_SUFFIX=-gpu
          fi
          final_name_tag="${final_name}:${tag}${DEVICE_SUFFIX}"
          final_name_tag_with_date="$final_name_tag-$date"
          tags=$final_name_tag,$final_name_tag_with_date
          echo $tags
          echo "tags=$tags" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ${{ inputs.context }}/
          tags: ${{ steps.generate-tags.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ steps.generate-build-args.outputs.base_image }}
            PYTHON_VERSION=${{ matrix.python_version }}
            R_VERSION=${{ matrix.r_version }}
            SPARK_VERSION=${{ matrix.spark_version }}
            DEVICE_SUFFIX=${{ steps.generate-build-args.outputs.device_suffix }}
