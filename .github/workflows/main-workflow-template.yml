name: Template for each build job

# It would make more sense to define this in the `main-workflow.yml`, but it's not possible yet
# See : https://github.com/orgs/community/discussions/23107
env:
  python_version_1: 3.12.5
  python_version_2: 3.11.9
  r_version_1: 4.4.1
  r_version_2: 4.3.3
  spark_version: 3.5.1
  DOCKERHUB_ORGANIZATION: ${{ github.repository_owner }}
  IMAGE_PREFIX: onyxia

on:
  workflow_call:
    inputs:
      image:
        description: Final release name
        required: true
        type: string
      context:
        description: Build context
        required: true
        type: string
      base_image:
        description: Name of the base image
        required: true
        type: string
      base_image_gpu:
        description: Name of the GPU base image
        required: false
        type: string

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code 
      uses: actions/checkout@v4

    - id: set-matrix
      run: |
        base_image_escaped=$(echo ${{inputs.base_image}} | sed 's/\//\\\//g' )
        base_image_gpu_escaped=$(echo ${{inputs.base_image_gpu}} | sed 's/\//\\\//g' )
        sed -i "s/:base_image_gpu/$base_image_gpu_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:base_image/$base_image_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_1/${{env.python_version_1}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_2/${{env.python_version_2}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_1/${{env.r_version_1}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_2/${{env.r_version_2}}/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:spark_version/${{env.spark_version}}/g" ./releases/${{ inputs.image }}.json
        matrix=$(cat ./releases/${{ inputs.image }}.json | jq .)
        echo $matrix
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: 
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      - name: Check out code 
        uses: actions/checkout@v4

      - name: Pass scripts to base image at build time
        # Just to put the `scripts` folder at the root of the project
        if: ${{ inputs.context == 'base' }}
        run: cp -r scripts/ base/scripts/

      - name: Make free space on GHA VM
        uses: ./.github/actions/make-free-space

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate input and output image names
        # Generate the full name of the input and output images
        id: generate-image-names
        run: |
          # General parameters to build image names
          dh_orga=${{ env.DOCKERHUB_ORGANIZATION }}
          dh_orga=$(echo "$dh_orga" | awk '{print tolower($0)}')
          date=$(date +%Y.%m.%d)
          if [ -n "${{ matrix.gpu }}" ]; then
              TAG_SUFFIX=-gpu
          fi

          # Function to compute image name from json release files
          compute_image_name() {
          local image="$1"
          if [[ "$image" == *"-delim-"* ]]; then
            # Images that have tags based on versions
            image_name=$(echo $image | awk -F '-delim-' '{print $1}' )
            tag=$(echo $image | awk -F '-delim-' '{print $2}' )
          else
            # onyxia-base
            image_name=$(echo $image | awk -F ':' '{print $1}' )
            tag=$(echo $image | awk -F ':' '{print $2}' )
          fi
          echo "${image_name}:${tag}"
          }

          # Compute input image name
          base_image=${{ matrix.base_image }}
          if [[ "$base_image" == *"ubuntu"* ]]; then
            # Base image is external (ubuntu or nvidia) -> no change to do
            base_image_final=$base_image
          else
            # Base image is internal -> compute relevant name
            base_image_computed=$(compute_image_name $base_image)
            base_image_final="${dh_orga}/${{ env.IMAGE_PREFIX }}-${base_image_computed}${TAG_SUFFIX}"
          fi

          # Compute output image name
          output_image=${{ matrix.output_image }}
          output_image_computed=$(compute_image_name $output_image)
          output_image_final="$dh_orga/${{ env.IMAGE_PREFIX}}-${output_image_computed}${TAG_SUFFIX}"
          output_image_final_with_date="$output_image_final-$date"
          output_tags=$output_image_final,$output_image_final_with_date

          # Make image names available to next steps
          echo "base_image=${base_image_final}" >> $GITHUB_OUTPUT
          echo "main_tag=$output_image_final" >> $GITHUB_OUTPUT
          echo "tags=$output_tags" >> $GITHUB_OUTPUT

          # Logging
          echo "Base image : ${base_image_final}"
          echo "Output image tags : ${output_tags}"
        shell: bash

      - name: Build and load to the Docker client
        if: ${{ matrix.gpu != 'true' }}
        uses: docker/build-push-action@v6
        with:
          load: true
          push: false
          context: ${{ inputs.context }}
          tags: ${{ steps.generate-image-names.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ steps.generate-image-names.outputs.base_image }}
            PYTHON_VERSION=${{ matrix.python_version }}
            R_VERSION=${{ matrix.r_version }}
            SPARK_VERSION=${{ matrix.spark_version }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Test image using Google's Container Structure Test
        if: ${{ matrix.gpu != 'true' }}
        uses: ./.github/actions/container-structure-test
        with:
          image: ${{ steps.generate-image-names.outputs.main_tag }}
          config: ./${{ inputs.context }}/tests.yaml

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push to DockerHub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ inputs.context }}
          tags: ${{ steps.generate-image-names.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ steps.generate-image-names.outputs.base_image }}
            PYTHON_VERSION=${{ matrix.python_version }}
            R_VERSION=${{ matrix.r_version }}
            SPARK_VERSION=${{ matrix.spark_version }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
