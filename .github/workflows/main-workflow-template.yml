name: Template for each build job

on:
  workflow_call:
    inputs:
      image:
        description: Final release name
        required: true
        type: string
      context:
        description: Build context
        required: true
        type: string
      base_image:
        description: Name of the base image
        required: true
        type: string
      base_image_gpu:
        description: Name of the GPU base image
        required: false
        type: string
      build_gpu:
        description: If true, build GPU versions of the images
        required: false
        type: boolean
        default: false
      python_version_1:
        description: context of docker image
        required: false
        type: string
      python_version_2:
        description: context of docker image
        required: false
        type: string
      r_version_1:
        description: context of docker image
        required: false
        type: string
      r_version_2:
        description: context of docker image
        required: false
        type: string
      spark_version:
        description: context of docker image
        required: false
        type: string

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code 
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5 
      with:
        python-version: '3.10'

    - id: set-matrix
      run: |
        matrix=$(python utils/generate-matrix.py --input_image ${{ inputs.base_image }} --output_image ${{ inputs.image }} \
                 --python_version1 ${{ inputs.python_version1 }} --python_version2 ${{ inputs.python_version2 }} \
                 --r_version1 ${{ inputs.r_version1 }} --r_version2 ${{ inputs.r_version2 }} --spark_version ${{ inputs.spark_version }} \
                 --build_gpu ${{ inputs.build_gpu }} --base_image_gpu ${{ inputs.base_image_gpu }})
        echo $matrix
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix:
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      - name: Check out code 
        uses: actions/checkout@v4

      - name: Pass scripts to base image at build time
        # Just to put the `scripts` folder at the root of the project
        if: ${{ inputs.context == 'base' }}
        run: cp -r scripts/ base/scripts/

      - name: Make free space on GHA VM
        uses: ./.github/actions/make-free-space

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate input and output image tags
        # Generate the full tags of the input and output images
        id: generate-tags
        run: |
          # General parameters to build image tags
          dh_orga=${{ github.repository_owner }}
          dh_orga=$(echo "$dh_orga" | awk '{print tolower($0)}')
          date=$(date +%Y.%m.%d)

          # Compute full input image tag
          base_image=${{ matrix.base_image }}"
          if [[ "$base_image" == *"ubuntu"* ]]; then
            # Base image is external (ubuntu or nvidia) -> no change
            base_image_tag=$base_image
          else
            # Base image is internal -> compute relevant tag
            base_image_tag="${dh_orga}/onyxia-${base_image}
          fi

          # Compute full output image tags
          output_image_tag="${dh_orga}/onyxia-${{ matrix.output_image }}"
          output_image_tag_with_date="$output_image_tag-$date"
          output_image_tags="$output_image_tag,$output_image_tag_with_date"

          # Make image names available to next steps
          echo "base_image=$base_image_tag" >> $GITHUB_OUTPUT
          echo "main_tag=$output_image_tag" >> $GITHUB_OUTPUT
          echo "tags=$output_image_tags" >> $GITHUB_OUTPUT

          # Logging
          echo "Base image : ${base_image_tag}"
          echo "Output image tags : ${output_image_tags}"
        shell: bash

      - name: Build and load to the Docker client
        if: ${{ matrix.gpu != 'true' }}
        uses: docker/build-push-action@v6
        with:
          load: true
          push: false
          context: ${{ inputs.context }}
          tags: ${{ steps.generate-tags.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ steps.generate-tags.outputs.base_image }}
            PYTHON_VERSION=${{ matrix.python_version }}
            R_VERSION=${{ matrix.r_version }}
            SPARK_VERSION=${{ matrix.spark_version }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Test image using Google's Container Structure Test
        if: ${{ matrix.gpu != 'true' }}
        uses: ./.github/actions/container-structure-test
        with:
          image: ${{ steps.generate-tags.outputs.main_tag }}
          config: ./${{ inputs.context }}/tests.yaml

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push to DockerHub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ inputs.context }}
          tags: ${{ steps.generate-tags.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ steps.generate-tags.outputs.base_image }}
            PYTHON_VERSION=${{ matrix.python_version }}
            R_VERSION=${{ matrix.r_version }}
            SPARK_VERSION=${{ matrix.spark_version }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
