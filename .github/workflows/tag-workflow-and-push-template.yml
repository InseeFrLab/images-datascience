name: Download Docker image from GitHub artifacts, tag and push it to DockerHub

env:
  OWNER: ${{ github.repository_owner }}

on:
  workflow_call:
    inputs:
      prefix:
        description: prefix image
        required: false
        type: string
      python_version_1:
        description: context of docker image
        required: false
        type: string
      python_version_2:
        description: context of docker image
        required: false
        type: string
      r_version_1:
        description: context of docker image
        required: false
        type: string
      r_version_2:
        description: context of docker image
        required: false
        type: string
      spark_version_1:
        description: context of docker image
        required: false
        type: string
      spark_version_2:
        description: spark version
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code 
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        FILES="./releases/*"
        data=[]
        for f in $FILES
        do
          echo "Processing $f"
            array=$(jq '.[] | .artefact_output_name' $f)
            for a in ${array[@]}; do
                echo "$a"
                data=$(echo $data | jq ". += [{"image":$a}]")
            done
        done
        echo $data
        $data=$(echo $data | sed -i "s/:python_version_1/${{inputs.python_version_1}}/g" )
        $data=$(echo $data | sed -i "s/:python_version_2/${{inputs.python_version_2}}/g" )
        $data=$(echo $data | sed -i "s/:r_version_1/${{inputs.r_version_1}}/g" )
        $data=$(echo $data | sed -i "s/:r_version_2/${{inputs.r_version_2}}/g" )
        $data=$(echo $data | sed -i "s/:spark_version_1/${{inputs.spark_version_1}}/g" )
        $data=$(echo $data | sed -i "s/:spark_version_2/${{inputs.spark_version_2}}/g" )
        matrix=$(echo $data| jq .) 
        echo $matrix                
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}

  docker:
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: 
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      - name: Check out code 
        uses: actions/checkout@v2
      
      - name: buildargs docker command
        id: buildargs
        run: |
            echo ${{matrix.image}}
            date=$(date +"YYYY.MM.DD")              
            echo ::set-output name=date::$date
        shell: bash

      - name: Load  image to Docker ðŸ“¥
        uses: ./.github/actions/load-image
        with:
          image: ${{ matrix.image }}

      - name: docker retag
        id: retag
        run: |
          image=$(echo ${{ matrix.image }} | sed -i "s/@/-/g" )
          echo "env.OWNER/${{ inputs.prefix}}-${{ matrix.image }}"
          docker tag ${{ matrix.image }} env.OWNER/${{ inputs.prefix}}-${{ matrix.image }} 
        shell: bash

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: classic push
        run: docker push env.OWNER/${{ inputs.prefix}}-${{ matrix.image }} 