name: Download parent image, build new one, test it and upload to GitHub artifacts

env:
  OWNER: ${{ github.repository_owner }}

on:
  workflow_call:
    inputs:
      test:
        description: should test
        required: false
        type: string
      push:
        description: should push
        required: false
        type: string
      image:
        description: name of docker image
        required: false
        type: string
      context:
        description: context of docker image
        required: false
        type: string
      base_image:
        description: context of docker image
        required: true
        type: string
      base_image_gpu:
        description: context of docker image
        required: false
        type: string
      python_version_1:
        description: context of docker image
        required: false
        type: string
      python_version_2:
        description: context of docker image
        required: false
        type: string
      r_version_1:
        description: context of docker image
        required: false
        type: string
      r_version_2:
        description: context of docker image
        required: false
        type: string
      spark_version_1:
        description: context of docker image
        required: false
        type: string
      spark_version_2:
        description: context of docker image
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code 
      uses: actions/checkout@v2
    - id: set-matrix
      run: |
        base_image_escaped=$(echo ${{inputs.base_image}} | sed 's/\//\\\//g' )
        base_image_gpu_escaped=$(echo ${{inputs.base_image_gpu}} | sed 's/\//\\\//g' )
        sed -i "s/:base_image_gpu/$base_image_gpu_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:base_image/$base_image_escaped/g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_1/${{inputs.python_version_1}} /g" ./releases/${{ inputs.image }}.json
        sed -i "s/:python_version_2/${{inputs.python_version_2}} /g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_1/${{inputs.r_version_1}} /g" ./releases/${{ inputs.image }}.json
        sed -i "s/:r_version_2/${{inputs.r_version_2}} /g" ./releases/${{ inputs.image }}.json
        matrix=$(cat ./releases/${{ inputs.image }}.json | jq .) 
        echo $matrix                
        echo ::set-output name=matrix::{\"include\":$(echo $matrix)}
  docker:
    runs-on: ubuntu-latest
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: 
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      #- name: Checkout
      #  uses: actions/checkout@v3
      - name: Check out code 
        uses: actions/checkout@v2

      - name: Load parent built image to Docker üì•
        if: ${{ matrix.artefact_input_name != '' }}
        uses: ./.github/actions/load-image
        with:
          image: ${{ matrix.artefact_input_name }}

      - name: buildargs docker command
        id: buildargs
        run: |
            python_version="${{ matrix.python_version}}"
            r_version="${{ matrix.r_version}}"
            spark_version="${{ matrix.spark_version}}"
            buildargs="--build-arg BASE_IMAGE=${{matrix.base_image}}"
            if [ -n "$python_version" ]; then
              buildargs+=" --build-arg PYTHON_VERSION=$python_version"
            fi
            if [ -n "$r_version" ]; then
              buildargs+=" --build-arg R_VERSION=$python_version"
            fi
            if [ -n "$spark_version" ]; then
               buildargs+=" --build-arg SPARK_VERSION=$python_version"
            fi
            
            echo "${buildargs}"
            echo ::set-output name=buildargs::${buildargs}
        shell: bash

      - name: Build image üõ†
        run: docker build --rm --force-rm  ${{ steps.buildargs.outputs.buildargs }} --tag ${{ inputs.image }} ${{ inputs.image }}/
        env:
          DOCKER_BUILDKIT: 1
          # Full logs for CI build
          BUILDKIT_PROGRESS: plain
        shell: bash

      - name: Save image as a tar for later use üíæ
        run: |
          artefact_output_name=echo "${{ matrix.artefact_output_name}}" | xargs
          echo "${artefact_output_name}"
          docker save ${{ inputs.image }} -o "/tmp/${artefact_output_name}.tar"
        shell: bash
      - name: Upload image as artifact üíæ
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artefact_output_name}}
          path: /tmp/${{ matrix.artefact_output_name}}.tar
          retention-days: 3

      # Self-hosted runners share a state (whole VM) between runs
      - name: Cleanup artifacts üóëÔ∏è
        run: |
          rm -f /tmp/${{ inputs.image }}-${{ steps.tag.outputs.tag }}.tar
        shell: bash
        if: always()